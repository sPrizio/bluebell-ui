@import "variables.module";

@mixin mq-xsmall-up {
  @media screen and (min-width: map-get($breakpoints, xsmall)) {
    @content;
  }
}

@mixin mq-xsmall-down {
  @media screen and (max-width: (map-get($breakpoints, xsmall) - 0.0625rem)) {
    @content;
  }
}

@mixin mq-small-up {
  @media screen and (min-width: map-get($breakpoints, small)) {
    @content;
  }
}

@mixin mq-small-down {
  @media screen and (max-width: (map-get($breakpoints, small) - 0.0625rem)) {
    @content;
  }
}

@mixin mq-medium-up {
  @media screen and (min-width: map-get($breakpoints, medium)) {
    @content;
  }
}

@mixin mq-medium-down {
  @media screen and (max-width: (map-get($breakpoints, medium) - 0.0625rem)) {
    @content;
  }
}

@mixin mq-large-up {
  @media screen and (min-width: map-get($breakpoints, large)) {
    @content;
  }
}

@mixin mq-large-down {
  @media screen and (max-width: (map-get($breakpoints, large) - 0.0625rem)) {
    @content;
  }
}

@mixin mq-xlarge-up {
  @media screen and (min-width: map-get($breakpoints, xlarge)) {
    @content;
  }
}

@mixin mq-xlarge-down {
  @media screen and (max-width: (map-get($breakpoints, xlarge) - 0.0625rem)) {
    @content;
  }
}

@mixin to-rem($property, $value, $important: false) {
  #{$property}: ($value + px) unquote(if($important, ' !important', ''));
  #{$property}: (calc($value / 16) + rem) unquote(if($important, ' !important', ''));
}

@mixin grid-columns($span: 12, $columns: 12) {
  width: 100%;
  max-width: (($span / $columns) * 100) * 1%;
}

@mixin grid-padding {
  padding-right: map-get($grid-padding, 'mobile', 'padding');
  padding-left: map-get($grid-padding, 'mobile', 'padding');

  @include mq-large-up {
    padding-right: map-get($grid-padding, 'desktop', 'padding');
    padding-left: map-get($grid-padding, 'desktop', 'padding');
  }
}

@mixin custom-scrollbar($el) {
  &::-webkit-scrollbar {
    height: 0.375rem !important;
    width: 0.375rem !important;
    border: 0.0625rem solid #d5d5d5 !important;
  }

  &::-webkit-scrollbar-track {
    background: #d4d4d4 !important;
    border-radius: 1.5rem !important;
  }

  &::-webkit-scrollbar-thumb {
    border-radius: 0.625rem !important;
    background: $color-primary !important;
  }
}

@mixin button-loader {
  color: transparent;
  min-width: 2.375rem;

  &::before {
    animation: 0.75s linear infinite spinner;
    animation-play-state: inherit;
    border: solid 0.125rem transparent; // background ring
    border-radius: 50%;
    content: "";
    height: 1.5rem;
    width: 1.5rem;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate3d(-50%, -50%, 0);
    will-change: transform;
  }
}

@mixin container {
  margin: 0 auto;
  max-width: $container-max-width;
  padding: 0 $container-padding;
}

@mixin break {
  @include mq-medium-up {
    display: none;
  }

  flex-basis: 100%;
  height: 0;
}

@mixin loader-animation {
  @keyframes spinner {
    0% {
      transform: translate3d(-50%, -50%, 0) rotate(0deg);
    }
    100% {
      transform: translate3d(-50%, -50%, 0) rotate(360deg);
    }
  }
}

@mixin body-sizing($size: 'default', $breakpoint: 'desktop') {
  font-size: map-get($font-body, $size, $breakpoint, 'size');
  line-height: map-get($font-body, $size, $breakpoint, 'line');
  letter-spacing: map-get($font-body, $size, $breakpoint, 'letter');
  font-weight: map-get($font-body, $size, $breakpoint, 'weight');
}

@mixin header-sizing($level: 1, $breakpoint: 'desktop') {
  @if $level == 1 {
    font-size: map-get($font-h1, $breakpoint, 'size');
    line-height: map-get($font-h1, $breakpoint, 'line');
    letter-spacing: map-get($font-h1, $breakpoint, 'letter');
    font-weight: map-get($font-h1, $breakpoint, 'weight');
  }

  @if $level == 2 {
    font-size: map-get($font-h2, $breakpoint, 'size');
    line-height: map-get($font-h2, $breakpoint, 'line');
    letter-spacing: map-get($font-h2, $breakpoint, 'letter');
    font-weight: map-get($font-h2, $breakpoint, 'weight');
  }

  @if $level == 3 {
    font-size: map-get($font-h3, $breakpoint, 'size');
    line-height: map-get($font-h3, $breakpoint, 'line');
    letter-spacing: map-get($font-h3, $breakpoint, 'letter');
    font-weight: map-get($font-h3, $breakpoint, 'weight');
  }

  @if $level == 4 {
    font-size: map-get($font-h4, $breakpoint, 'size');
    line-height: map-get($font-h4, $breakpoint, 'line');
    letter-spacing: map-get($font-h4, $breakpoint, 'letter');
    font-weight: map-get($font-h4, $breakpoint, 'weight');
  }

  @if $level == 5 {
    font-size: map-get($font-h5, $breakpoint, 'size');
    line-height: map-get($font-h5, $breakpoint, 'line');
    letter-spacing: map-get($font-h5, $breakpoint, 'letter');
    font-weight: map-get($font-h5, $breakpoint, 'weight');
  }

  @if $level == 6 {
    font-size: map-get($font-h6, $breakpoint, 'size');
    line-height: map-get($font-h6, $breakpoint, 'line');
    letter-spacing: map-get($font-h6, $breakpoint, 'letter');
    font-weight: map-get($font-h6, $breakpoint, 'weight');
  }
}